<?php
/**
 * @file
 * Drupal needs this blank file.
 */

include_once 'gsb_feature_slideshow_fpp.features.inc';

 /**
 * Implements hook_entity_info_alter().
 *
 * Here we tell Drupal about our custom fpp -
 * 'slideshow'.
 *
 */
function gsb_feature_slideshow_fpp_entity_info_alter(&$entity_info) {

  // create the GSB Slideshow FPP

  $entity_info['fieldable_panels_pane']['bundles']['slideshow'] = array(
    'label' => t('Slideshow'),
    'pane category' => t('GSB panes'),
    'pane top level' => TRUE, // set to true to make this show as a top level icon
    'admin' => array(
      'path' => 'admin/structure/fieldable-panels-panes/manage/%fieldable_panels_panes_type',
      'bundle argument' => 4,
      // Note that this has all _ replaced with - from the bundle name.
      'real path' => 'admin/structure/fieldable-panels-panes/manage/slideshow',
      'access arguments' => array('administer fieldable panels panes'),
    ),
  );

  // create the slide show view mode

  $entity_info['file']['view modes']['gsb_slideshow'] = array(
    'label' => t('GSB Slideshow'),
    'custom settings' => TRUE,
  );
}

/**
 * Implements hook_library()
 */
function gsb_feature_slideshow_fpp_library() {
  $libraries['flexslider'] = array(
    'title' => 'Flexslider',
    'website' => 'https://github.com/woothemes/FlexSlider',
    'version' => '2.1',
    'js' => array(
      drupal_get_path('profile', 'gsb_public') . '/libraries/flexslider/jquery.flexslider-min.js' => array(),
    ),
    'css' => array(
      drupal_get_path('profile', 'gsb_public') . '/libraries/flexslider/flexslider.css' => array(),
    ),
  );
  $libraries['gsb_feature_slideshow_fpp'] = array(
    'title' => 'GSB Flexslider',
    'website' => 'https://github.com/woothemes/FlexSlider',
    'version' => '2.1',
    'js' => array(
      drupal_get_path('module', 'gsb_feature_slideshow_fpp') . '/js/gsb_feature_slideshow_fpp.flexslider.js' => array(),
    ),
    'dependencies' => array(
      array('gsb_feature_slideshow_fpp', 'flexslider'),
    ),
  );
  return $libraries;
}

function gsb_feature_slideshow_fpp_preprocess_fieldable_panels_pane(&$variables) {
  if ($variables['elements']['#bundle'] != 'slideshow') {
    return;
  }
  drupal_add_library('gsb_feature_slideshow_fpp', 'gsb_feature_slideshow_fpp');
}

// Formatter

/**
 * Implementation of hook_field_formatter_info().
 *
 * Here we tell Drupal about our custom field formatter -
 * 'gsb_slideshow_default_format'.
 *
 */
function gsb_feature_slideshow_fpp_field_formatter_info() {
  return array(
    'gsb_slideshow_default_format' => array(
      'label' => t('Field Collection Slideshow'),
      'field types' => array('field_collection'),
      'settings' => array('view_mode' => 'full'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function gsb_feature_slideshow_fpp_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element[0] = array(
    '#theme' => 'slideshow_items',
    '#items' => $items,
  );

  return $element;
}

// Formatter Settings Form

/**
 * Implements hook_field_formatter_settings_form().
 */
function gsb_feature_slideshow_fpp_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {

  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element = array();

  if ($display['type'] == 'gsb_slideshow_default_format') {
    $element['view_mode'] = array(
      '#title'   => t('View mode'),
      '#type'    => 'select',
      '#options' => file_entity_view_mode_labels(),
      '#default_value' => $settings['view_mode'],
    );
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function gsb_feature_slideshow_fpp_field_formatter_settings_summary($field, $instance, $view_mode) {

  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = t('View Mode: @viewmode', array('@viewmode' => $settings['view_mode']));

  return $summary;
}

// Theme hookup and markup

/**
 * Implements hook_theme().
 */
function gsb_feature_slideshow_fpp_theme($existing, $type, $theme, $path) {

  return array(
    'slideshow_items' => array(
      'variables' => array(
        'items' => array(),
      ),
      'template' => 'templates/slideshow-items',
    ),
    'slideshow_slide' => array(
      'variables' => array(
        'slide_info' => array(),
      ),
      'template' => 'templates/slideshow-slide',
    ),
  );
}

/**
 * Theme function for the slideshow.
 */
function template_preprocess_slideshow_items(&$variables) {
  $variables['slides'] = array();
  // Assemble the slides
  foreach ($variables['items'] as $item_data) {
    if ($slide_info = field_collection_field_get_entity($item_data)) {
      $variables['slides'][] = theme('slideshow_slide', array('slide_info' => $slide_info));
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for slideshow-slide.tpl.php.
 */
function template_preprocess_slideshow_slide(&$variables) {
  $slide_info = $variables['slide_info'];
  $field_collection_view = $slide_info->view();
  $field_collection_view = reset($field_collection_view['field_collection_item']);
  $wrapper = entity_metadata_wrapper('field_collection_item', $slide_info);

  $variables['slide'] = array(
    '#type' => 'container',
    // At least empty attributes array is required by theme_container.
    '#attributes' => array(),
  );
  if ($file = $wrapper->field_image_single_public->value()) {
    $media = $field_collection_view['field_image_single_public'];
    // Because the media formatter for images contains a link, it will not be
    // properly wrapped below. This pulls out just the image render array.
    if (isset($media[0]['main']['item']['#bundle']) && $media[0]['main']['item']['#bundle'] == 'image' && isset($media[0]['main']['item']['file'])) {
      $media = $media[0]['main']['item']['file'];
    }
    $variables['slide']['media'] = $media;
  }
  else {
    $variables['classes_array'][] = 'no-media';
  }

  // Retrieve only the keys we want from the build field collection.
  $keys = array('field_superhead', 'field_text_slide');
  $contents = array_intersect_key($field_collection_view, array_flip($keys));
  if (!empty($contents)) {
    $variables['slide']['text'] = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array(
          'slide-text-wrapper',
        ),
      ),
      '#weight' => 10,
      'inner' => $contents += array(
        '#type' => 'container',
        '#attributes' => array(
          'class' => array(
            'inner',
          ),
        ),
      ),
    );
  }

  try {
    if ($link_raw = $wrapper->field_link_superhead->raw()) {
      $attributes = $wrapper->field_link_superhead->attributes->value();
      $link = l('', $link_raw['url'], array(
        'query' => $link_raw['query'],
        'attributes' => array_merge($attributes, array('class' => 'slide-superhead')),
      ));
      $variables['slide']['text']['inner']['field_superhead']['#prefix'] = str_replace('</a>', '', $link);
      $variables['slide']['text']['inner']['field_superhead']['#suffix'] = '</a>';
    }
  }
  catch (EntityMetadataWrapperException $e) {
    // Superhead link is optional.
  }
  try {
    if ($link_raw = $wrapper->field_link_single->raw()) {
      $attributes = $wrapper->field_link_single->attributes->value();
      $link = l('', $link_raw['url'], array(
        'query' => $link_raw['query'],
        'attributes' => array_merge($attributes, array('class' => 'slide-text')),
      ));
      $variables['slide']['text']['inner']['field_text_slide']['#prefix'] = str_replace('</a>', '', $link);
      $variables['slide']['text']['inner']['field_text_slide']['#suffix'] = '</a>';
    }
  }
  catch (EntityMetadataWrapperException $e) {
    // Text link is optional.
  }
}

/**
 * Implements hook_form_alter().
 */
function gsb_feature_slideshow_fpp_form_alter(&$form, &$form_state, $form_id) {
  // Only manipulate the fieldable panel pane form and the  one at that.
  if (($form_id == 'fieldable_panels_panes_fieldable_panels_pane_content_type_edit_form' || $form_id == 'fieldable_panels_panes_entity_edit_form') && !empty($form['#bundle']) && $form['#bundle'] == 'slideshow') {
    $form['instructions']['#markup'] = '<a href="https://courses.gsb.stanford.edu/courses/656" target="_blank">View slideshow standards</a> for guidance on using this feature.';
    $form['instructions']['#weight'] = -5;
  }
}
