<?php
/**
 * @file
 * Drupal needs this blank file.
 */

include_once 'gsb_feature_slideshow_fpp.features.inc';

 /**
 * Implements hook_entity_info_alter().
 *
 * Here we tell Drupal about our custom fpp -
 * 'slideshow'.
 *
 */
function gsb_feature_slideshow_fpp_entity_info_alter(&$entity_info) {

  // create the GSB Slideshow FPP

  $entity_info['fieldable_panels_pane']['bundles']['slideshow'] = array(
    'label' => t('Slideshow'),
    'pane category' => t('GSB panes'),
    'pane top level' => TRUE, // set to true to make this show as a top level icon
    'pane icon' => drupal_get_path('module', 'panopoly_widgets') . '/images/icon_text.png',
    'admin' => array(
      'path' => 'admin/structure/fieldable-panels-panes/manage/%fieldable_panels_panes_type',
      'bundle argument' => 4,
      // Note that this has all _ replaced with - from the bundle name.
      'real path' => 'admin/structure/fieldable-panels-panes/manage/slideshow',
      'access arguments' => array('administer fieldable panels panes'),
    ),
  );

  // create the slide show view mode

  $entity_info['file']['view modes']['gsb_slideshow'] = array(
    'label' => t('GSB Slideshow'),
    'custom settings' => TRUE,
  );

}

/**
 * Implements hook_init()
 *
 * Here we tell Drupal about our javascript file
 *
 */
function gsb_feature_slideshow_fpp_init() {

  // Include the Slideshow Rotation time setting

  $rotation_time = 1000 * variable_get('panopoly_widgets_spotlight_rotation_time', 4);
  $js_variables = array('gsb_slideshow_settings' => array('rotation_time' => $rotation_time));

  drupal_add_js($js_variables, 'setting');

  // Add our custom javascript to the footer to override other things.
  drupal_add_js(drupal_get_path('module', 'gsb_feature_slideshow_fpp') . '/gsb_feature_slideshow_fpp.js', array('scope' => 'footer'));
}

/**
 * Implements hook_form_alter()
 */
function gsb_feature_slideshow_fpp_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == 'fieldable_panels_panes_fieldable_panels_pane_content_type_edit_form' && $form['#bundle'] == 'slideshow') {

    foreach ($form['field_gsb_slideshow']['und'] as $key => &$value) {
      if (!is_int($key)) {
        continue;
      }
      $form['field_gsb_slideshow']['und'][$key]['field_button_style']['#states'] = array(
        'visible' => array(
          ':input[name="field_gsb_slideshow[und][0][field_slideshow_type][und]"]' => array(
            array('value' => 'standard-slider'),
          ),
        ),
      );
      $form['field_gsb_slideshow']['und'][$key]['field_button_text']['#states'] = array(
        'visible' => array(
          ':input[name="field_gsb_slideshow[und][0][field_slideshow_type][und]"]' => array(
            array('value' => 'standard-slider'),
          ),
        ),
      );
    }

  }

}

// Formatter

/**
 * Implementation of hook_field_formatter_info().
 *
 * Here we tell Drupal about our custom field formatter -
 * 'gsb_slideshow_default_format'.
 *
 */
function gsb_feature_slideshow_fpp_field_formatter_info() {
  return array(
    'gsb_slideshow_default_format' => array(
      'label' => t('Field Collection Slideshow'),
      'field types' => array('field_collection'),
      'settings' => array('view_mode' => 'full'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function gsb_feature_slideshow_fpp_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element[0] = array(
    '#theme' => 'slideshow_items',
    '#items' => $items,
  );

  return $element;
}

// Formatter Settings Form

/**
 * Implements hook_field_formatter_settings_form().
 */
function gsb_feature_slideshow_fpp_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {

  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element = array();

  if ($display['type'] == 'gsb_slideshow_default_format') {
    $element['view_mode'] = array(
      '#title'   => t('View mode'),
      '#type'    => 'select',
      '#options' => file_entity_view_mode_labels(),
      '#default_value' => $settings['view_mode'],
    );
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function gsb_feature_slideshow_fpp_field_formatter_settings_summary($field, $instance, $view_mode) {

  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = t('View Mode: @viewmode', array('@viewmode' => $settings['view_mode']));

  return $summary;
}

// Theme hookup and markup

/**
 * Implements hook_theme().
 */
function gsb_feature_slideshow_fpp_theme($existing, $type, $theme, $path) {

  return array(
    'slideshow_items' => array(
      'variables' => array(
        'items' => array(),
      ),
      'template' => 'templates/slideshow-items',
    ),
    'slideshow_slide' => array(
      'variables' => array(
        'slide_info' => array(),
      ),
      'template' => 'templates/slideshow-slide',
    ),
  );
}

/**
 * Theme function for the slideshow.
 */
function template_preprocess_slideshow_items(&$variables) {
  $variables['slides'] = array();
  // Assemble the slides
  foreach ($variables['items'] as $item_data) {
    if ($slide_info = field_collection_field_get_entity($item_data)) {
      $variables['slides'][] = theme('slideshow_slide', array('slide_info' => $slide_info));
    }
  }
}

/**
 * Theme function for table view
 */
function template_preprocess_slideshow_slide(&$variables) {

  $slide_info = $variables['slide_info'];
  $field_collection_view = $slide_info->view();
  $field_collection_view = reset($field_collection_view['field_collection_item']);
  $wrapper = entity_metadata_wrapper('field_collection_item', $slide_info);
  $variables['title'] = $field_collection_view['field_title'];
  $variables['description'] = $field_collection_view['field_body'];
  $variables['cta_text'] = $field_collection_view['field_slideshow_item_cta_text'];
  $variables['link'] = $wrapper->field_link_single->url->value();
  $variables['classes_array'][] = $wrapper->field_slideshow_item_color->value();

  if ($file = $wrapper->field_file_single_public->value()) {
    $variables['media'] = $field_collection_view['field_file_single_public'];
  }
  else {
    $variables['media'] = '';
    $variables['classes_array'][] = 'no-media';
  }
}

