<?php
/**
 * @file
 * Drupal needs this blank file.
 */

include_once 'gsb_feature_slideshow_fpp.features.inc';

 /**
 * Implements hook_entity_info_alter().
 *
 * Here we tell Drupal about our custom fpp -
 * 'slideshow'.
 *
 */
function gsb_feature_slideshow_fpp_entity_info_alter(&$entity_info) {

  // create the GSB Slideshow FPP

  $entity_info['fieldable_panels_pane']['bundles']['slideshow'] = array(
    'label' => t('Slideshow'),
    'pane category' => t('GSB panes'),
    'pane top level' => TRUE, // set to true to make this show as a top level icon
    'pane icon' => drupal_get_path('module', 'panopoly_widgets') . '/images/icon_text.png',
    'admin' => array(
      'path' => 'admin/structure/fieldable-panels-panes/manage/%fieldable_panels_panes_type',
      'bundle argument' => 4,
      // Note that this has all _ replaced with - from the bundle name.
      'real path' => 'admin/structure/fieldable-panels-panes/manage/slideshow',
      'access arguments' => array('administer fieldable panels panes'),
    ),
  );

  // create the slide show view mode

  $entity_info['file']['view modes']['gsb_slideshow'] = array(
    'label' => t('GSB Slideshow'),
    'custom settings' => TRUE,
  );

}

/**
 * Implements hook_library()
 */
function gsb_feature_slideshow_fpp_library() {
  $libraries['flexslider'] = array(
    'title' => 'Flexslider',
    'website' => 'https://github.com/woothemes/FlexSlider',
    'version' => '2.1',
    'js' => array(
      drupal_get_path('profile', 'gsb_public') . '/libraries/flexslider/jquery.flexslider-min.js' => array(),
    ),
    'css' => array(
      drupal_get_path('profile', 'gsb_public') . '/libraries/flexslider/flexslider.css' => array(),
    ),
  );
  $libraries['gsb_feature_slideshow_fpp'] = array(
    'title' => 'GSB Flexslider',
    'website' => 'https://github.com/woothemes/FlexSlider',
    'version' => '2.1',
    'js' => array(
      drupal_get_path('module', 'gsb_feature_slideshow_fpp') . '/js/gsb_feature_slideshow_fpp.flexslider.js' => array(),
    ),
    'dependencies' => array(
      array('gsb_feature_slideshow_fpp', 'flexslider'),
    ),
  );
  return $libraries;
}

function gsb_feature_slideshow_fpp_preprocess_fieldable_panels_pane(&$variables) {
  if ($variables['elements']['#bundle'] != 'slideshow') {
    return;
  }
  drupal_add_library('gsb_feature_slideshow_fpp', 'gsb_feature_slideshow_fpp');

  // Add a class based on the selected slideshow style.
  try {
    $wrapper = entity_metadata_wrapper('fieldable_panels_pane', $variables['elements']['#element']);
    $variables['classes_array'][] = 'slideshow-' . $wrapper->field_slideshow_style->value();
  }
  catch (EntityMetadataWrapperException $e) {
    // If the fields are ever missing/renamed, Entity API will throw an
    // exception instead of using watchdog.
    watchdog('gsb_feature_slideshow_fpp', 'In @function on line @line: "@message"', array('@function' => __FUNCTION__, '@line' => __LINE__, '@message' => $e->getMessage()), WATCHDOG_ERROR);
  }
}

/**
 * Implements hook_form_alter()
 */
function gsb_feature_slideshow_fpp_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == 'fieldable_panels_panes_fieldable_panels_pane_content_type_edit_form' && $form['#bundle'] == 'slideshow') {

    // add a validation function
    $form['#validate'][] = "gsb_feature_slideshow_fpp_validate";

    foreach ($form['field_gsb_slideshow']['und'] as $key => &$value) {
      if (!is_int($key)) {
        continue;
      }
      $form['field_gsb_slideshow']['und'][$key]['field_button_style']['#states'] = array(
        'visible' => array(
          ':input[name="field_gsb_slideshow[und][0][field_slideshow_type][und]"]' => array(
            array('value' => 'standard-slider'),
          ),
        ),
      );
      $form['field_gsb_slideshow']['und'][$key]['field_button_text']['#states'] = array(
        'visible' => array(
          ':input[name="field_gsb_slideshow[und][0][field_slideshow_type][und]"]' => array(
            array('value' => 'standard-slider'),
          ),
        ),
      );
    }

  }

}

function gsb_feature_slideshow_fpp_validate($form, &$form_state) {

  // We want to change the text for the url required field to say...
  // 'Link field is required.' instead of the default which is...
  // 'URL field is required.' see WPP-905

  $url_required_message = t('Link field is required.');

  $url_name = 'field_slideshow_item][und][0][field_link_single][und][0][url';

  $errors = form_get_errors();

  if ($errors) {

    // Clear errors.
    form_clear_error();

    // Clear error messages.
    $error_messages = drupal_get_messages('error');

    // Initialize an array where removed error messages are stored.
    $removed_messages = array();  

    // Check if there is an error for the url field
    $url_error = false;

    foreach ($errors as $name => $error_message) {
      if ($name == $url_name) {
        $removed_messages[] = $error_message;
        unset($errors[$name]);
        $url_error = true;
      }
    }

    if ($url_error) {
      // Now add it back with the new text we want
      form_set_error($url_name, $url_required_message);
    }

    // Reinstate remaining errors.
    foreach ($errors as $name => $error) {
      form_set_error($name, $error);
      // form_set_error() calls drupal_set_message(), so we have to filter out
      // these from the error messages as well.
      $removed_messages[] = $error;
    }

    // Reinstate remaining error messages (which, at this point, are messages that
    // were originated outside of the validation process).
    foreach (array_diff($error_messages['error'], $removed_messages) as $message) {
      drupal_set_message($message, 'error');
    }

  }

}

// Formatter

/**
 * Implementation of hook_field_formatter_info().
 *
 * Here we tell Drupal about our custom field formatter -
 * 'gsb_slideshow_default_format'.
 *
 */
function gsb_feature_slideshow_fpp_field_formatter_info() {
  return array(
    'gsb_slideshow_default_format' => array(
      'label' => t('Field Collection Slideshow'),
      'field types' => array('field_collection'),
      'settings' => array('view_mode' => 'full'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function gsb_feature_slideshow_fpp_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element[0] = array(
    '#theme' => 'slideshow_items',
    '#items' => $items,
  );

  return $element;
}

// Formatter Settings Form

/**
 * Implements hook_field_formatter_settings_form().
 */
function gsb_feature_slideshow_fpp_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {

  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element = array();

  if ($display['type'] == 'gsb_slideshow_default_format') {
    $element['view_mode'] = array(
      '#title'   => t('View mode'),
      '#type'    => 'select',
      '#options' => file_entity_view_mode_labels(),
      '#default_value' => $settings['view_mode'],
    );
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function gsb_feature_slideshow_fpp_field_formatter_settings_summary($field, $instance, $view_mode) {

  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = t('View Mode: @viewmode', array('@viewmode' => $settings['view_mode']));

  return $summary;
}

// Theme hookup and markup

/**
 * Implements hook_theme().
 */
function gsb_feature_slideshow_fpp_theme($existing, $type, $theme, $path) {

  return array(
    'slideshow_items' => array(
      'variables' => array(
        'items' => array(),
      ),
      'template' => 'templates/slideshow-items',
    ),
    'slideshow_slide' => array(
      'variables' => array(
        'slide_info' => array(),
      ),
      'template' => 'templates/slideshow-slide',
    ),
  );
}

/**
 * Theme function for the slideshow.
 */
function template_preprocess_slideshow_items(&$variables) {
  $variables['slides'] = array();
  // Assemble the slides
  foreach ($variables['items'] as $item_data) {
    if ($slide_info = field_collection_field_get_entity($item_data)) {
      $variables['slides'][] = theme('slideshow_slide', array('slide_info' => $slide_info));
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for slideshow-slide.tpl.php.
 */
function template_preprocess_slideshow_slide(&$variables) {
  $slide_info = $variables['slide_info'];
  $field_collection_view = $slide_info->view();
  $field_collection_view = reset($field_collection_view['field_collection_item']);
  $wrapper = entity_metadata_wrapper('field_collection_item', $slide_info);
  $variables['classes_array'][] = $wrapper->field_slideshow_item_color->value();
  $variables['slide'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => $variables['classes_array'],
    ),
  );
  if ($file = $wrapper->field_file_single_public->value()) {
    $variables['slide']['media'] = $field_collection_view['field_file_single_public'];
  }
  else {
    $variables['classes_array'][] = 'no-media';
  }
  $variables['slide']['text'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array(
        'slide-text',
      ),
    ),
  );
  $variables['slide']['text']['inner'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array(
        'inner',
      ),
    ),
    'title' => $field_collection_view['field_title'],
    'description' => $field_collection_view['field_body'],
    'cta_text' => $field_collection_view['field_slideshow_item_cta_text'],
  );

  try {
    $link = $wrapper->field_link_single->url->value();
    $variables['slide']['#prefix'] = '<a href="' . $link . '">';
    $variables['slide']['#suffix'] = '</a>';
  }
  catch (EntityMetadataWrapperException $e) {
    // Link is optional.
  }
}
